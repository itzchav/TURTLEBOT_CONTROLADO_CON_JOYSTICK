// Generated by gencpp from file erick/servCuadradoResponse.msg
// DO NOT EDIT!


#ifndef ERICK_MESSAGE_SERVCUADRADORESPONSE_H
#define ERICK_MESSAGE_SERVCUADRADORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace erick
{
template <class ContainerAllocator>
struct servCuadradoResponse_
{
  typedef servCuadradoResponse_<ContainerAllocator> Type;

  servCuadradoResponse_()
    : respuesta(0.0)
    , completado(false)  {
    }
  servCuadradoResponse_(const ContainerAllocator& _alloc)
    : respuesta(0.0)
    , completado(false)  {
  (void)_alloc;
    }



   typedef double _respuesta_type;
  _respuesta_type respuesta;

   typedef uint8_t _completado_type;
  _completado_type completado;





  typedef boost::shared_ptr< ::erick::servCuadradoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::erick::servCuadradoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct servCuadradoResponse_

typedef ::erick::servCuadradoResponse_<std::allocator<void> > servCuadradoResponse;

typedef boost::shared_ptr< ::erick::servCuadradoResponse > servCuadradoResponsePtr;
typedef boost::shared_ptr< ::erick::servCuadradoResponse const> servCuadradoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::erick::servCuadradoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::erick::servCuadradoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::erick::servCuadradoResponse_<ContainerAllocator1> & lhs, const ::erick::servCuadradoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.respuesta == rhs.respuesta &&
    lhs.completado == rhs.completado;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::erick::servCuadradoResponse_<ContainerAllocator1> & lhs, const ::erick::servCuadradoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace erick

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::erick::servCuadradoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::erick::servCuadradoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erick::servCuadradoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erick::servCuadradoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erick::servCuadradoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erick::servCuadradoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::erick::servCuadradoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09b77b3bda4b7b678305ab5336ce2eaa";
  }

  static const char* value(const ::erick::servCuadradoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09b77b3bda4b7b67ULL;
  static const uint64_t static_value2 = 0x8305ab5336ce2eaaULL;
};

template<class ContainerAllocator>
struct DataType< ::erick::servCuadradoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "erick/servCuadradoResponse";
  }

  static const char* value(const ::erick::servCuadradoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::erick::servCuadradoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 respuesta	        # Campo de mensaje de respuesta\n"
"bool    completado	        # Campo indicando si hubo exito en dar servicio\n"
;
  }

  static const char* value(const ::erick::servCuadradoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::erick::servCuadradoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.respuesta);
      stream.next(m.completado);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servCuadradoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::erick::servCuadradoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::erick::servCuadradoResponse_<ContainerAllocator>& v)
  {
    s << indent << "respuesta: ";
    Printer<double>::stream(s, indent + "  ", v.respuesta);
    s << indent << "completado: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.completado);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERICK_MESSAGE_SERVCUADRADORESPONSE_H
